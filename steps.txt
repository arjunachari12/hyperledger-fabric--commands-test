Step 1: Creating AWS account - open this url
https://console.aws.amazon.com/


Step 2: Install docker: open below link
https://github.com/arjunachari12/install-jenkins-container/blob/main/install-docker.md

Step 3: Install node.js

curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash
sudo apt-get update
sudo apt-get install nodejs
node --version 


Step4: install python
sudo apt-get install python3
jpython3 --version

Step5: Install libtools
sudo apt-get install libltdl-dev

Step6: Install python and pip
sudo apt-get install python3-pip
pip3 --version
sudo pip3 install docker-compose


Step7: docker compose
sudo apt update
sudo apt upgrade
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo dockerâ€“compose --version

Step8: download Fabric lib
sudo chmod 666 /var/run/docker.sock
sudo curl -sSL https://bit.ly/2ysbOFE | bash -s -- 2.2.2 1.4.9

#Installing the JDK 8

sudo apt update
sudo apt install default-jdk -y
java --version

#install Gradle-from app store
sudo apt install unzip
VERSION=7.5
wget https://services.gradle.org/distributions/gradle-${VERSION}-bin.zip -P /tmp
sudo unzip -d /opt/gradle /tmp/gradle-${VERSION}-bin.zip
sudo ln -s /opt/gradle/gradle-${VERSION} /opt/gradle/latest
sudo nano /etc/profile.d/gradle.sh

#Paster below content in the above file
export GRADLE_HOME=/opt/gradle/latest
export PATH=${GRADLE_HOME}/bin:${PATH}

#CTRL + x, Select Y and hiyt enter to save contentr

#verify the update

sudo cat /etc/profile.d/gradle.sh
sudo chmod +x /etc/profile.d/gradle.sh
source /etc/profile.d/gradle.sh

gradle -v

=================================

Install Gradle version 7.4
wget -c https://services.gradle.org/distributions/gradle-7.4.2-bin.zip -P /tmp
sudo unzip -d /opt/gradle /tmp/gradle-7.4.2-bin.zip
ls /opt/gradle
export GRADLE_HOME=/opt/gradle/gradle-7.4.2
export PATH=${GRADLE_HOME}/bin:${PATH}
gradle --version

Step1: Create Fabric network
cd fabric-samples/test-network
sudo ./network.sh down
docker system prune
sudo ./network.sh up -ca -s couchdb



#Chaincode
step 1: Create a new gradle project in eclipse
 or 
git clone https://github.com/arjunachari12/Carshowroom.git
step 2: modify build.gradle with below content

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */
 
plugins {
	id 'checkstyle'
    // Apply the java-library plugin to add support for Java Library
    id 'java-library-distribution'
}
 
group 'carshowroom'
version '1.0'
 
repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
     maven {
        url "https://hyperledger.jfrog.io/hyperledger/fabric-maven"
    }
    jcenter()
    maven {
        url 'https://jitpack.io'
    }
}
 
dependencies {
	compileOnly 'org.hyperledger.fabric-chaincode-java:fabric-chaincode-shim:2.2.+'
    implementation 'com.owlike:genson:1.5'
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
 
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'
 
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}


STep 2: create a new class Car.java

package Carshowroom;
 
import com.owlike.genson.annotation.JsonProperty;
import org.hyperledger.fabric.contract.annotation.DataType;
import org.hyperledger.fabric.contract.annotation.Property;
import java.util.Objects;
 
@DataType()
public final class Car {
 
	@Property()
	private final String id;
 
	@Property()
	private final String model;
 
	@Property()
	private final String owner;
 
	@Property()
	private final String value;
 
	public String getId() {
		return id;
	}
 
	public String getModel() {
		return model;
	}
	public String getOwner() { 
		return owner;
	}
 
	public String getValue() {
		return value;
	}
 
	public Car(@JsonProperty("id") final String id, @JsonProperty("model") final String model, @JsonProperty("owner") final String owner,
			@JsonProperty("value") final String value) {
		this.id = id;
		this.model = model;
		this.owner = owner;
		this.value = value;
	}
 
	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
 
		if ((obj == null) || (getClass() != obj.getClass())) {
			return false;
		}
 
		Car other = (Car) obj;
 
		return Objects.deepEquals(new String[] { getId(), getModel(), getOwner(), getValue() },
				new String[] { other.getId(), other.getModel(), other.getOwner(), other.getValue() });
	}
 
	@Override
	public int hashCode() {
		return Objects.hash(getId(), getModel(), getOwner(), getValue());
	}
 
	@Override
	public String toString() {
		return this.getClass().getSimpleName() + "@" + Integer.toHexString(hashCode()) + " [id=" + id + ", model=" + model
				+ ", owner=" + owner + ", value=" + value + "]";
	}
 
}

step 3: creata a new class CarTransfer.java 

package Carshowroom;
 
import org.hyperledger.fabric.contract.Context;
import org.hyperledger.fabric.contract.ContractInterface;
import org.hyperledger.fabric.contract.annotation.Contract;
import org.hyperledger.fabric.contract.annotation.Default;
import org.hyperledger.fabric.contract.annotation.Info;
import org.hyperledger.fabric.contract.annotation.Transaction;
import org.hyperledger.fabric.shim.ChaincodeException;
import org.hyperledger.fabric.shim.ChaincodeStub;
import com.owlike.genson.Genson;
 
 
@Contract(
        name = "CarShowroom",
        info = @Info(
                title = "CarShowroom contract",
                description = "A Sample Car transfer chaincode example",
                version = "0.0.1-SNAPSHOT"))
 
 
@Default
public final class CarTransfer implements ContractInterface {
 
	private final Genson genson = new Genson();
	private enum CarShowroomErrors {
	        Car_NOT_FOUND,
	        Car_ALREADY_EXISTS
	    }
	
	
	/**
     * Add some initial properties to the ledger
     *
     * @param ctx the transaction context
     */
    @Transaction()
    public void initLedger(final Context ctx) {
    	
        ChaincodeStub stub= ctx.getStub();
        
        Car Car = new Car("1", "Maruti","Mark","6756");
        
        String CarState = genson.serialize(Car);
        
        stub.putStringState("1", CarState);
    }
    
    
    /**
     * Add new Car on the ledger.
     *
     * @param ctx the transaction context
     * @param id the key for the new Car
     * @param model the model of the new Car
     * @param ownername the owner of the new Car
     * @param value the value of the new Car
     * @return the created Car
     */
	
    @Transaction()
    public Car addNewCar(final Context ctx, final String id, final String model,
            final String ownername, final String value) {
        
    	ChaincodeStub stub = ctx.getStub();
 
        String CarState = stub.getStringState(id);
        
        if (!CarState.isEmpty()) {
            String errorMessage = String.format("Car %s already exists", id);
            System.out.println(errorMessage);
            throw new ChaincodeException(errorMessage, CarShowroomErrors.Car_ALREADY_EXISTS.toString());
        }
        
        Car Car = new Car(id, model, ownername,value);
        
        CarState = genson.serialize(Car);
        
        stub.putStringState(id, CarState); 
        
        return Car;
    }
 
 
    	/**
	     * Retrieves a Car based upon Car Id from the ledger.
	     *
	     * @param ctx the transaction context
	     * @param id the key
	     * @return the Car found on the ledger if there was one
	     */
    	@Transaction()
	    public Car queryCarById(final Context ctx, final String id) {
	        ChaincodeStub stub = ctx.getStub();
	        String CarState = stub.getStringState(id);
 
	        if (CarState.isEmpty()) {
	            String errorMessage = String.format("Car %s does not exist", id);
	            System.out.println(errorMessage);
	            throw new ChaincodeException(errorMessage, CarShowroomErrors.Car_NOT_FOUND.toString());
	        }
	        
	        Car Car = genson.deserialize(CarState, Car.class);
	        return Car;
	    }
    	
        /**
   	     * Changes the owner of a Car on the ledger.
   	     *
   	     * @param ctx the transaction context
   	     * @param id the key
   	     * @param newOwner the new owner
   	     * @return the updated Car
   	     */
   	    @Transaction()
   	    public Car changeCarOwnership(final Context ctx, final String id, final String newCarOwner) {
   	        ChaincodeStub stub = ctx.getStub();
 
   	        String CarState = stub.getStringState(id);
 
   	        if (CarState.isEmpty()) {
   	            String errorMessage = String.format("Car %s does not exist", id);
   	            System.out.println(errorMessage);
   	            throw new ChaincodeException(errorMessage, CarShowroomErrors.Car_NOT_FOUND.toString());
   	        }
 
   	        Car Car = genson.deserialize(CarState, Car.class);
 
   	        Car newCar = new Car(Car.getId(), Car.getModel(), newCarOwner, Car.getValue());
   	        
   	        String newCarState = genson.serialize(newCar);
   	        
   	        stub.putStringState(id, newCarState);
 
   	        return newCar;
   	    } 
}

=====
Step 

#Compile Carshowroom
cd fabric-samples/chaincode/Carshowroom
chmod +x gradlew
./gradlew installDist


Step 6: Bring network up

sudo ./network.sh down
docker system prune
sudo ./network.sh up -ca -s couchdb
sudo ./network.sh createChannel -c samplechannel
sudo chmod 666 /var/run/docker.sock
docker exec peer0.org1.example.com peer channel list

Step 7: Package chaincode
Open fabric-samples in VS Code

create file with as lifecycle_setup_org1.sh /fabric-samples/test-network


add belo content

#!/bin/sh
export PATH=${PWD}/../bin:${PWD}:$PATH
export FABRIC_CFG_PATH=$PWD/../config/
export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
export CORE_PEER_ADDRESS=localhost:7051
export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

# Source this file
source ./lifecycle_setup_org1.sh

# package
sudo chmod -R 777 .

peer lifecycle chaincode package Carshowroom.tar.gz --path ../chaincode/Carshowroom/build/install/Carshowroom --lang java --label Carshowroom_1

Step 8: Install chaincode

peer lifecycle chaincode install Carshowroom.tar.gz --peerAddresses localhost:7051 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE

# Create a new file Source this file under test-network folder
lifecycle_setup_org2.sh

#add below content

#!/bin/sh
export PATH=${PWD}/../bin:${PWD}:$PATH
export FABRIC_CFG_PATH=$PWD/../config/
export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org2MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
export CORE_PEER_ADDRESS=localhost:9051
export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

#source this file
source ./lifecycle_setup_org2.sh

#install on oprg2
peer lifecycle chaincode install Carshowroom.tar.gz --peerAddresses localhost:9051 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE 

#check isntalled chaincode on Org1
source ./lifecycle_setup_org1.sh
peer lifecycle chaincode queryinstalled --peerAddresses localhost:7051 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE






=======================REDO Network setup and deploy ChainCode ======

sudo ./network.sh down
docker system prune
sudo ./network.sh up -ca -s couchdb
sudo ./network.sh createChannel -c samplechannel
sudo chmod 666 /var/run/docker.sock
docker exec peer0.org1.example.com peer channel list
source ./lifecycle_setup_org1.sh
sudo chmod -R 777 .
peer lifecycle chaincode package Carshowroom.tar.gz --path ../chaincode/Carshowroom/build/install/Carshowroom --lang java --label Carshowroom_1
peer lifecycle chaincode install Carshowroom.tar.gz --peerAddresses localhost:7051 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE
source ./lifecycle_setup_org2.sh
peer lifecycle chaincode install Carshowroom.tar.gz --peerAddresses localhost:9051 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE 
source ./lifecycle_setup_org1.sh
peer lifecycle chaincode queryinstalled --peerAddresses localhost:7051 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE

